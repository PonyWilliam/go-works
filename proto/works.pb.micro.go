// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/works.proto

//
//ID int64 `gorm:"primary_key;auto_increment;not_null" json:"id"`
//Name string `json:"name"`
//Nums string `json:"nums"`//工号
//Sex string `json:"sex"` //性别
//Level int64 `json:"level"`//等级
//Score int64 `json:"score"`//信誉分
//Place string `json:"place"`//住址
//Telephone string `json:"telephone"`//电话
//Mail string `json:"mail"`
//Description string `json:"description"`//补充描述
//ISWork bool `json:"is_work"`//是否在职

package works

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Works service

func NewWorksEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Works service

type WorksService interface {
	CreateWorker(ctx context.Context, in *Request_Workers, opts ...client.CallOption) (*Response_CreateWorker, error)
	UpdateWorker(ctx context.Context, in *Request_Workers, opts ...client.CallOption) (*Response_CreateWorker, error)
	DeleteWorkerByID(ctx context.Context, in *Request_Workers_ID, opts ...client.CallOption) (*Response_Workers, error)
	FindWorkerByID(ctx context.Context, in *Request_Workers_ID, opts ...client.CallOption) (*Response_Worker_Show, error)
	FindWorkerByNums(ctx context.Context, in *Request_Workers_Nums, opts ...client.CallOption) (*Response_Worker_Show, error)
	FindWorkerByName(ctx context.Context, in *Request_Workers_Name, opts ...client.CallOption) (*Response_Workers_Show, error)
	FindAll(ctx context.Context, in *Request_Null, opts ...client.CallOption) (*Response_Workers_Show, error)
	CheckSum(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
}

type worksService struct {
	c    client.Client
	name string
}

func NewWorksService(name string, c client.Client) WorksService {
	return &worksService{
		c:    c,
		name: name,
	}
}

func (c *worksService) CreateWorker(ctx context.Context, in *Request_Workers, opts ...client.CallOption) (*Response_CreateWorker, error) {
	req := c.c.NewRequest(c.name, "Works.CreateWorker", in)
	out := new(Response_CreateWorker)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksService) UpdateWorker(ctx context.Context, in *Request_Workers, opts ...client.CallOption) (*Response_CreateWorker, error) {
	req := c.c.NewRequest(c.name, "Works.UpdateWorker", in)
	out := new(Response_CreateWorker)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksService) DeleteWorkerByID(ctx context.Context, in *Request_Workers_ID, opts ...client.CallOption) (*Response_Workers, error) {
	req := c.c.NewRequest(c.name, "Works.DeleteWorkerByID", in)
	out := new(Response_Workers)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksService) FindWorkerByID(ctx context.Context, in *Request_Workers_ID, opts ...client.CallOption) (*Response_Worker_Show, error) {
	req := c.c.NewRequest(c.name, "Works.FindWorkerByID", in)
	out := new(Response_Worker_Show)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksService) FindWorkerByNums(ctx context.Context, in *Request_Workers_Nums, opts ...client.CallOption) (*Response_Worker_Show, error) {
	req := c.c.NewRequest(c.name, "Works.FindWorkerByNums", in)
	out := new(Response_Worker_Show)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksService) FindWorkerByName(ctx context.Context, in *Request_Workers_Name, opts ...client.CallOption) (*Response_Workers_Show, error) {
	req := c.c.NewRequest(c.name, "Works.FindWorkerByName", in)
	out := new(Response_Workers_Show)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksService) FindAll(ctx context.Context, in *Request_Null, opts ...client.CallOption) (*Response_Workers_Show, error) {
	req := c.c.NewRequest(c.name, "Works.FindAll", in)
	out := new(Response_Workers_Show)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksService) CheckSum(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Works.CheckSum", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Works service

type WorksHandler interface {
	CreateWorker(context.Context, *Request_Workers, *Response_CreateWorker) error
	UpdateWorker(context.Context, *Request_Workers, *Response_CreateWorker) error
	DeleteWorkerByID(context.Context, *Request_Workers_ID, *Response_Workers) error
	FindWorkerByID(context.Context, *Request_Workers_ID, *Response_Worker_Show) error
	FindWorkerByNums(context.Context, *Request_Workers_Nums, *Response_Worker_Show) error
	FindWorkerByName(context.Context, *Request_Workers_Name, *Response_Workers_Show) error
	FindAll(context.Context, *Request_Null, *Response_Workers_Show) error
	CheckSum(context.Context, *LoginRequest, *LoginResponse) error
}

func RegisterWorksHandler(s server.Server, hdlr WorksHandler, opts ...server.HandlerOption) error {
	type works interface {
		CreateWorker(ctx context.Context, in *Request_Workers, out *Response_CreateWorker) error
		UpdateWorker(ctx context.Context, in *Request_Workers, out *Response_CreateWorker) error
		DeleteWorkerByID(ctx context.Context, in *Request_Workers_ID, out *Response_Workers) error
		FindWorkerByID(ctx context.Context, in *Request_Workers_ID, out *Response_Worker_Show) error
		FindWorkerByNums(ctx context.Context, in *Request_Workers_Nums, out *Response_Worker_Show) error
		FindWorkerByName(ctx context.Context, in *Request_Workers_Name, out *Response_Workers_Show) error
		FindAll(ctx context.Context, in *Request_Null, out *Response_Workers_Show) error
		CheckSum(ctx context.Context, in *LoginRequest, out *LoginResponse) error
	}
	type Works struct {
		works
	}
	h := &worksHandler{hdlr}
	return s.Handle(s.NewHandler(&Works{h}, opts...))
}

type worksHandler struct {
	WorksHandler
}

func (h *worksHandler) CreateWorker(ctx context.Context, in *Request_Workers, out *Response_CreateWorker) error {
	return h.WorksHandler.CreateWorker(ctx, in, out)
}

func (h *worksHandler) UpdateWorker(ctx context.Context, in *Request_Workers, out *Response_CreateWorker) error {
	return h.WorksHandler.UpdateWorker(ctx, in, out)
}

func (h *worksHandler) DeleteWorkerByID(ctx context.Context, in *Request_Workers_ID, out *Response_Workers) error {
	return h.WorksHandler.DeleteWorkerByID(ctx, in, out)
}

func (h *worksHandler) FindWorkerByID(ctx context.Context, in *Request_Workers_ID, out *Response_Worker_Show) error {
	return h.WorksHandler.FindWorkerByID(ctx, in, out)
}

func (h *worksHandler) FindWorkerByNums(ctx context.Context, in *Request_Workers_Nums, out *Response_Worker_Show) error {
	return h.WorksHandler.FindWorkerByNums(ctx, in, out)
}

func (h *worksHandler) FindWorkerByName(ctx context.Context, in *Request_Workers_Name, out *Response_Workers_Show) error {
	return h.WorksHandler.FindWorkerByName(ctx, in, out)
}

func (h *worksHandler) FindAll(ctx context.Context, in *Request_Null, out *Response_Workers_Show) error {
	return h.WorksHandler.FindAll(ctx, in, out)
}

func (h *worksHandler) CheckSum(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.WorksHandler.CheckSum(ctx, in, out)
}
